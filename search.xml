<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>异步流程（四）- async/await</title>
      <link href="/2018/12/12/asyncFlow4-async-await/"/>
      <url>/2018/12/12/asyncFlow4-async-await/</url>
      
        <content type="html"><![CDATA[<p>本文是通过一个<a href="/2018/12/04/asyncFlow0-开篇/">具体问题</a>，来整理下异步流程的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async/await</a>实现。</p><blockquote><p>当调用一个 async 函数时，会返回一个 Promise 对象。当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。async 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待 Promise  的结果出来，然后恢复async函数的执行并返回解析值（resolved）。</p></blockquote><p>async/await在写法上更像是同步代码，很好的解决了Promise还是用链式回调的问题。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">'./mockServer'</span>)</span><br><span class="line"></span><br><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> students = <span class="keyword">await</span> api.getStudentsPromise()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> averagePromises = students.map(<span class="keyword">async</span> s =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> getAveragePromise(s.id)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> averages = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(averagePromises)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> students.map(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            id: s.id,</span><br><span class="line">            name: s.name,</span><br><span class="line">            average: averages[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)().then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAveragePromise</span> (<span class="params">studentId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> courses = <span class="keyword">await</span> api.getCoursesPromise(studentId)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> evaluationPromises = courses.map(<span class="keyword">async</span> c =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> api.getEvaluationPromise(studentId, c.id)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> evaluations = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(evaluationPromises)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> average = evaluations.reduce(<span class="function">(<span class="params">preVal, evaluation</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> preVal + evaluation.score</span><br><span class="line">    &#125;, <span class="number">0</span>) / evaluations.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(average)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>从代码量来看，明显更为简洁。当然async/await在错误处理上也有明显的优势，让js里的try/catch有了很多的用武之地，这里不做赘述。</p><p>开篇里也有提到使用<code>generator</code>实现，但是不准备这样做了。因为generator在做异步流程控制时，更像是提供了一种<code>暂停</code>机制，再配上迭代器(流程管理)让他自动跑起来，实现出来的效果就像是async/await，所以就不实现了。推荐大名鼎鼎的<a href="https://github.com/tj/co" target="_blank" rel="noopener">co库</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 异步流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> async </tag>
            
            <tag> 异步 </tag>
            
            <tag> async/await </tag>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>异步流程（三）- Observables</title>
      <link href="/2018/12/11/asyncFlow3-observable/"/>
      <url>/2018/12/11/asyncFlow3-observable/</url>
      
        <content type="html"><![CDATA[<p>本文是通过一个<a href="/2018/12/04/asyncFlow0-开篇/">具体问题</a>，来整理下异步流程的<a href="https://cn.rx.js.org/manual/overview.html#h12" target="_blank" rel="noopener">Observables</a>实现。</p><blockquote><p>Observables 是多个值的惰性推送集合。</p></blockquote><h2 id="Observable-可观察对象"><a href="#Observable-可观察对象" class="headerlink" title="Observable (可观察对象)"></a>Observable (可观察对象)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="number">4</span>);</span><br><span class="line">    observer.complete();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'just before subscribe'</span>);</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'got value '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'something wrong occurred: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'just after subscribe'</span>);</span><br></pre></td></tr></table></figure><p>控制台执行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">just before subscribe</span><br><span class="line">got value 1</span><br><span class="line">got value 2</span><br><span class="line">got value 3</span><br><span class="line">just after subscribe</span><br><span class="line">got value 4</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>Observable（可观察对象）有什么特征：</p><ul><li>可以返回多个值，或者，可以进行多次求值（observer.next(data)）</li><li>惰性求值，如果不调用（subscribe()），<code>Rx.Observable.create(fn)</code>里的fn不会执行；多次订阅会多次执行fn</li><li>推送，是指生产者（observable对象）决定何时向消费者（订阅observable对象的方法）发送数据</li></ul><p>归结到我们的问题：</p><ol><li>在每次异步获取数据结束后，推送给订阅者数据</li><li>在每次异步获取数据结束后，决定是不是完成（observer.complete()）这组操作，比如是不是已经取到了所有学生的平均成绩</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路和之前一样，只是换了Observable对象实现。<br>在实现结果上有些不同，没有按照取到的学生名单来输出数据，懒~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">'./mockServer'</span>)</span><br><span class="line"><span class="keyword">const</span> Rx = <span class="built_in">require</span>(<span class="string">'rxjs'</span>)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有学生平均成绩</span></span><br><span class="line"><span class="comment">     * 1. 获取学生列表</span></span><br><span class="line"><span class="comment">     * 2. 对每个学生执行获取平均成绩</span></span><br><span class="line"><span class="comment">     * 3. 所有成绩回去完成后执行回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    api.getStudents(<span class="function"><span class="params">students</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> studentsOb = Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 通过对比完成数量和学生总数量</span></span><br><span class="line">            <span class="comment">// 来确定是否所有学生平均成绩已获取完成</span></span><br><span class="line">            <span class="keyword">let</span> finishCount = <span class="number">0</span></span><br><span class="line">            students.forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;</span><br><span class="line">                getAverage(s.id, average =&gt; &#123;</span><br><span class="line">                    observer.next(&#123;</span><br><span class="line">                        id: s.id,</span><br><span class="line">                        name: s.name,</span><br><span class="line">                        average,</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                    finishCount++</span><br><span class="line">                    <span class="keyword">if</span> (finishCount &gt;= students.length) observer.complete()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> r = []</span><br><span class="line">        studentsOb.subscribe(&#123;</span><br><span class="line">            next: <span class="function"><span class="params">result</span> =&gt;</span> r.push(result),</span><br><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> cb(r)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAverage</span> (<span class="params">studentId, cb</span>) </span>&#123;</span><br><span class="line">        api.getCourses(studentId, courses =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> coursesOb = Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> finishCount = <span class="number">0</span></span><br><span class="line">                courses.forEach(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">                    getEvaluation(studentId, c.id, e =&gt; &#123;</span><br><span class="line">                        observer.next(e.score)</span><br><span class="line"></span><br><span class="line">                        finishCount++</span><br><span class="line">                        <span class="keyword">if</span> (finishCount &gt;= courses.length) observer.complete()</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> scores = []</span><br><span class="line">            coursesOb.subscribe(&#123;</span><br><span class="line">                next: <span class="function"><span class="params">score</span> =&gt;</span> scores.push(score),</span><br><span class="line">                complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> average = scores.reduce(<span class="function">(<span class="params">preVal, score</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> preVal + score</span><br><span class="line">                    &#125;, <span class="number">0</span>) / scores.length</span><br><span class="line"></span><br><span class="line">                    cb(average)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getEvaluation</span> (<span class="params">studentId, courseId, cb</span>) </span>&#123;</span><br><span class="line">        api.getEvaluation(studentId, courseId, e =&gt; &#123;</span><br><span class="line">            cb(e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用函数，输出结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>对于这个具体问题，提供了一种处理多个异步流程结束后执行回调的方式，不用自己实现了。其他方面也没有很特别，主要了解到Observable可以做到多个值惰性推送，留待以后观察。</p>]]></content>
      
      
      <categories>
          
          <category> 异步流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> async </tag>
            
            <tag> 异步 </tag>
            
            <tag> Observables </tag>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>异步流程（二）- Promise</title>
      <link href="/2018/12/07/asyncFlow2-promise/"/>
      <url>/2018/12/07/asyncFlow2-promise/</url>
      
        <content type="html"><![CDATA[<p>本文是通过一个<a href="/2018/12/04/asyncFlow0-开篇/">具体问题</a>，来整理下异步流程的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a>实现。</p><blockquote><p>Promise对象用于表示一个异步操作的最终状态（完成或失败），以及其返回的值。</p></blockquote><p>Promise有如下特点：</p><ol><li>Promise对象是对一个操作（同步或者异步）的封装</li><li>该Promise对象，可以代表这个操作的最终状态，并会带着返回值</li><li><code>new Promise(fn)</code>中<code>fn</code>会同步执行，<code>.then(cb)</code>中的<code>cb</code>方法会异步执行</li></ol><h2 id="Mock-Promise-API"><a href="#Mock-Promise-API" class="headerlink" title="Mock Promise API"></a>Mock Promise API</h2><p>将原本回调形式的api改为promise形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">const</span> Random = Mock.Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayFn</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn()</span><br><span class="line">    &#125;, Random.natural(<span class="number">60</span>, <span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getStudents = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = Mock.mock(&#123;</span><br><span class="line">        <span class="string">'students|3-10'</span>: [&#123;</span><br><span class="line">            <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'@first'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    delayFn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(d.students)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getStudentsPromise = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        getStudents(resolve)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getCourses = <span class="function"><span class="keyword">function</span> (<span class="params">studentId, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = Mock.mock(&#123;</span><br><span class="line">        <span class="string">'courses|3-5'</span>: [&#123;</span><br><span class="line">            studentId,</span><br><span class="line">            <span class="string">'id'</span>: <span class="string">'@word'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    delayFn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(d.courses)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getCoursesPromise = <span class="function"><span class="keyword">function</span> (<span class="params">studentId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        getCourses(studentId, resolve)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getEvaluation = <span class="function"><span class="keyword">function</span> (<span class="params">studentId, courseId, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = Mock.mock(&#123;</span><br><span class="line">        evaluation: &#123;</span><br><span class="line">            studentId,</span><br><span class="line">            courseId,</span><br><span class="line">            <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'score'</span>: <span class="string">'@natural(0, 100)'</span>,</span><br><span class="line">            <span class="comment">// 'totalScore|1': [100, 150],</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    delayFn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(d.evaluation)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getEvaluationPromise = <span class="function"><span class="keyword">function</span> (<span class="params">studentId, courseId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        getEvaluation(studentId, courseId, resolve)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getStudents,</span><br><span class="line">    getStudentsPromise,</span><br><span class="line">    getCourses,</span><br><span class="line">    getCoursesPromise,</span><br><span class="line">    getEvaluation,</span><br><span class="line">    getEvaluationPromise,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路整理-amp-代码实现"><a href="#思路整理-amp-代码实现" class="headerlink" title="思路整理&amp;代码实现"></a>思路整理&amp;代码实现</h2><h3 id="1-主流程"><a href="#1-主流程" class="headerlink" title="1. 主流程"></a>1. 主流程</h3><p>由于Promise代表的是可期待的结果，所以思路上可将这些可期待的结果当做实际结果使用。对思路有如下调整：</p><ol><li>获取学生列表</li><li>处理学生列表，获取所有学生的平均成绩</li><li>格式化返回数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">'./mockServer'</span>)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> api.getStudentsPromise().then(<span class="function">(<span class="params">students</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 开始获取每个学生的平均成绩，并传递promise</span></span><br><span class="line">        <span class="keyword">return</span> students.map(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...s,</span><br><span class="line">                average: <span class="number">0</span>,</span><br><span class="line">                averagePromise: getAverageScorePromise(s.id)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// *** 全部学生平均成绩获取完成后，将平均成绩赋值给每个学生</span></span><br><span class="line">        <span class="keyword">const</span> averagePromises = r.map(<span class="function"><span class="params">s</span> =&gt;</span> s.averagePromise)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all(averagePromises).then(<span class="function"><span class="params">averages</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; averages.length; i++) &#123;</span><br><span class="line">                r[i].average = averages[i]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 格式化返回数据</span></span><br><span class="line">        <span class="keyword">return</span> r.map(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                id: s.id,</span><br><span class="line">                name: s.name,</span><br><span class="line">                average: s.average</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)().then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用函数，输出结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上边的关键步骤在于，在所有平均成绩获取完成后，进行其他操作。相对于回调函数，Promise提供<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a>方法，来处理一组异步操作完成后进行其他操作的事情。</p><h3 id="2-分支流程：获取平均成绩"><a href="#2-分支流程：获取平均成绩" class="headerlink" title="2. 分支流程：获取平均成绩"></a>2. 分支流程：获取平均成绩</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取学生的平均成绩</span></span><br><span class="line"><span class="comment"> * 1. 获取学生课程</span></span><br><span class="line"><span class="comment"> * 2. 全部获取完成后求平均值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAverageScorePromise</span> (<span class="params">studentId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> api.getCoursesPromise(studentId).then(<span class="function"><span class="params">courses</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> scorePromises = courses.map(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getScorePromise(studentId, c.id)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all(scorePromises).then(<span class="function"><span class="params">scores</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> scores.reduce(<span class="function">(<span class="params">preVal, score</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> preVal + score</span><br><span class="line">            &#125;, <span class="number">0</span>) / scores.length</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-分支流程：获取课程成绩"><a href="#3-分支流程：获取课程成绩" class="headerlink" title="3. 分支流程：获取课程成绩"></a>3. 分支流程：获取课程成绩</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取学生的课程成绩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScorePromise</span> (<span class="params">studentId, courseId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> api.getEvaluationPromise(studentId, courseId).then(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> e.score</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sunsly1991/code/tree/master/ly/asyncFlow/promise.js" target="_blank" rel="noopener">code</a></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="与回调函数对比"><a href="#与回调函数对比" class="headerlink" title="与回调函数对比"></a>与回调函数对比</h3><p>回调函数和Promise不同的地方：</p><ol><li>回调函数<ul><li>是在异步操作执行完成后，在回调函数中获取到结果</li><li>不善于处理多个异步互相依赖的场景</li><li>嵌套较多，需要花较多精力去拆解<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getStudents(<span class="function"><span class="params">students</span> =&gt;</span> &#123;</span><br><span class="line">    stuednts.forEach(<span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">        getCourses(student.id, courses =&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>如上代码，在获取到学生信息后，需要对学生进行的操作，都需要在回调中完成。在回调中如果还有其他的异步操作，就会造成一层一层深入，直到取到所有结果。</p><ol start="2"><li>Promise<ul><li>是异步操作执行完成的结果（状态）</li><li>处理多个互相有依赖的异步时，每个异步都可以看做是独立的对象来处理，可对这些异步的结果进行各种操作，比如：排序、全部完成后执行回调（Promise.all()）等</li><li>链式调用，优化回调地狱</li></ul></li></ol><h3 id="不是很完美"><a href="#不是很完美" class="headerlink" title="不是很完美"></a>不是很完美</h3><p>Promise本质上，还是将结果放在<code>.then(cb)</code>这样的回调中来处理。<br>虽然作为js用户，已经很习惯回调的方式。但是如果能像同步代码那样处理异步流程，又会是一个很大的进步。</p>]]></content>
      
      
      <categories>
          
          <category> 异步流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> async </tag>
            
            <tag> 异步 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>异步流程（一）- callback</title>
      <link href="/2018/12/04/asyncFlow1-callback/"/>
      <url>/2018/12/04/asyncFlow1-callback/</url>
      
        <content type="html"><![CDATA[<p>本文是通过一个<a href="/2018/12/04/asyncFlow0-开篇/">具体问题</a>，来整理下异步流程的<code>回调函数</code>实现。</p><h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><p>整个流程会分成几步：</p><ol><li>获取学生列表</li><li>根据每个学生的id，获取该学生的课程列表</li><li>根据学生id，和每个课程id，获取成绩</li><li>取得学生的每门课成绩后，计算平均值</li><li>每个学生成绩平均值计算完成后，执行最终回调，回传结果</li></ol><p>其中1、2、3步，只需要在回调中遍历数组，分别调用api即可。4、5稍显复杂，涉及到一组异步操作完成后，再执行一些操作。</p><p>问题拆解完，下边来具体实现。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-一组异步完成后执行回调"><a href="#1-一组异步完成后执行回调" class="headerlink" title="1. 一组异步完成后执行回调"></a>1. 一组异步完成后执行回调</h3><ol><li>记录这组异步总数量</li><li>每个异步完成后记录已完成数量</li><li>根据已完成数量和总数量对比，来确定是否全部异步完成，如已完成执行回调</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对一组异步操作全部完成并执行统一回调的抽象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CbFlowDone</span> (<span class="params">count, doneCb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步操作的数量</span></span><br><span class="line">    <span class="keyword">this</span>.count = count</span><br><span class="line">    <span class="comment">// 完成的数量</span></span><br><span class="line">    <span class="keyword">this</span>.doneCount = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 是否全部完成</span></span><br><span class="line">    <span class="keyword">this</span>.done = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 全部完成的回调</span></span><br><span class="line">    <span class="keyword">this</span>.doneCb = doneCb</span><br><span class="line">&#125;</span><br><span class="line">CbFlowDone.prototype = &#123;</span><br><span class="line">    <span class="comment">// 用来检查是否完成这组操作</span></span><br><span class="line">    <span class="comment">// 如果已完成，执行回调</span></span><br><span class="line">    check: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.done) <span class="keyword">this</span>.doneCb()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 一组操作中，每次完成后执行的方法</span></span><br><span class="line">    <span class="keyword">do</span>: <span class="function"><span class="keyword">function</span> (<span class="params">c = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doneCount += c</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.doneCount &gt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">this</span>.done = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-回调地狱来吧"><a href="#2-回调地狱来吧" class="headerlink" title="2. 回调地狱来吧"></a>2. 回调地狱来吧</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">'./mockServer'</span>)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> r = &#123;</span><br><span class="line">        <span class="comment">// 所有学生数据</span></span><br><span class="line">        data: [],</span><br><span class="line">        format: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data.map(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    id: d.id,</span><br><span class="line">                    name: d.name,</span><br><span class="line">                    average: d.average</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取学生列表</span></span><br><span class="line">    api.getStudents(<span class="function">(<span class="params">students</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 绑定所有学生流程完成之后的操作</span></span><br><span class="line">        <span class="comment">// students.length表示需要获取学生课程的次数</span></span><br><span class="line">        <span class="comment">// 也就是所有学生还需要执行异步的次数</span></span><br><span class="line">        r.done = <span class="keyword">new</span> CbFlowDone(students.length, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 5. 每个学生成绩平均值计算完成后，执行最终回调，回传结果</span></span><br><span class="line">            cb(<span class="keyword">this</span>.format())</span><br><span class="line">        &#125;.bind(r))</span><br><span class="line"></span><br><span class="line">        students.forEach(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 学生的数据、方法</span></span><br><span class="line">            <span class="keyword">const</span> _s = &#123;</span><br><span class="line">                id: s.id,</span><br><span class="line">                name: s.name,</span><br><span class="line">                average: <span class="number">0</span>,</span><br><span class="line">                courses: [],</span><br><span class="line">                <span class="comment">// 计算平均分</span></span><br><span class="line">                calc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.average = <span class="keyword">this</span>.courses.reduce(<span class="function">(<span class="params">d, c</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> d + c.score</span><br><span class="line">                    &#125;, <span class="number">0</span>) / <span class="keyword">this</span>.courses.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 按顺序压入每个学生数据</span></span><br><span class="line">            <span class="comment">// 并利用闭包、引用数据类型变量更新数据</span></span><br><span class="line">            r.data.push(_s)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 根据每个学生的id，获取该学生的课程列表</span></span><br><span class="line">            api.getCourses(s.id, (courses) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 绑定每个学生流程完成之后的操作</span></span><br><span class="line">                <span class="comment">// courses.length表示还需要获取成绩的次数</span></span><br><span class="line">                <span class="comment">// 也就是当前学生还需要执行的异步操作的次数</span></span><br><span class="line">                _s.done = <span class="keyword">new</span> CbFlowDone(courses.length, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 4. 取得学生的每门课成绩后，计算平均值</span></span><br><span class="line">                    <span class="keyword">this</span>.calc()</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 每个学生的异步完成后，检查所有学生异步是否全部完成</span></span><br><span class="line">                    r.done.do().check()</span><br><span class="line">                &#125;.bind(_s))</span><br><span class="line">                courses.forEach(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> _c = &#123;</span><br><span class="line">                        id: c.id,</span><br><span class="line">                        studentId: c.studentId,</span><br><span class="line">                    &#125;</span><br><span class="line">                    _s.courses.push(_c)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 3. 根据学生id，和每个课程id，获取成绩</span></span><br><span class="line">                    api.getEvaluation(s.id, c.id, (e) =&gt; &#123;</span><br><span class="line">                        _c.score = e.score</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 每次成绩获取完成后，检查该学生是否获取完全部成绩</span></span><br><span class="line">                        _s.done.do().check()</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sunsly1991/code/tree/master/ly/asyncFlow/cb.js" target="_blank" rel="noopener">code</a></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>回调的方式好的地方：</p><ol><li>获取数据的思路很容易理清楚，层层回调就好</li><li>回调函数是语言特色，没有新的知识，学习成本很低</li></ol><p>不友好的地方：</p><ol><li>回调地狱，层层缩进（也是因为懒得整理</li><li>需要花过多的精力来处理异步流程，容易让代码冗长（当然也是因为只是简单堆叠代码，没有抽象</li><li>上边1、2也能说明，想要写的优雅，需要花更多的精力，需要更大的代码量</li></ol><hr><p>更新于<a href="/2018/12/04/asyncFlow2-promise/">异步流程-promise</a>之后。<br>痛定思痛，不能对回调破罐子破摔，做了一些抽象，从思路上也做了些转变。</p><h2 id="优化一下"><a href="#优化一下" class="headerlink" title="优化一下"></a>优化一下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> r = &#123;</span><br><span class="line">        <span class="comment">// 所有学生数据</span></span><br><span class="line">        data: [],</span><br><span class="line">        format: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data.map(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    id: d.id,</span><br><span class="line">                    name: d.name,</span><br><span class="line">                    average: d.average</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    api.getStudents(<span class="function"><span class="params">students</span> =&gt;</span> &#123;</span><br><span class="line">        r.done = <span class="keyword">new</span> CbFlowDone(students.length, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            cb(<span class="keyword">this</span>.format())</span><br><span class="line">        &#125;.bind(r))</span><br><span class="line"></span><br><span class="line">        students.forEach(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> _s = &#123; ...s &#125;</span><br><span class="line">            r.data.push(_s)</span><br><span class="line">            getAverage(s.id, (average) =&gt; &#123;</span><br><span class="line">                _s.average = average</span><br><span class="line">                r.done.do().check()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAverage</span> (<span class="params">studentId, cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> r = &#123;</span><br><span class="line">            average: <span class="number">0</span>,</span><br><span class="line">            courses: [],</span><br><span class="line">            calc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.average = <span class="keyword">this</span>.courses.reduce(<span class="function">(<span class="params">d, c</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> d + c.score</span><br><span class="line">                &#125;, <span class="number">0</span>) / <span class="keyword">this</span>.courses.length</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.average</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        api.getCourses(studentId, courses =&gt; &#123;</span><br><span class="line">            r.done = <span class="keyword">new</span> CbFlowDone(courses.length, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 求平均值</span></span><br><span class="line">                cb(<span class="keyword">this</span>.calc())</span><br><span class="line">            &#125;.bind(r))</span><br><span class="line"></span><br><span class="line">            courses.forEach(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> _c = &#123; ...c &#125;</span><br><span class="line">                r.courses.push(_c)</span><br><span class="line"></span><br><span class="line">                getEvaluation(studentId, c.id, e =&gt; &#123;</span><br><span class="line">                    _c.score = e.score</span><br><span class="line"></span><br><span class="line">                    r.done.do().check()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getEvaluation</span> (<span class="params">studentId, courseId, cb</span>) </span>&#123;</span><br><span class="line">        api.getEvaluation(studentId, courseId, e =&gt; &#123;</span><br><span class="line">            cb(e.score)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'改造后'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>和Promise的实现，区别有：</p><ol><li>自己实现Promise.all()的方法，来添加一组异步全部完成的回调</li><li>通过闭包在回调里更新数据</li><li>真的多花了些时间来写= =、</li></ol>]]></content>
      
      
      <categories>
          
          <category> 异步流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> async </tag>
            
            <tag> 异步 </tag>
            
            <tag> callback </tag>
            
            <tag> 回调函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>异步流程（零）- 开篇</title>
      <link href="/2018/12/04/asyncFlow0-%E5%BC%80%E7%AF%87/"/>
      <url>/2018/12/04/asyncFlow0-%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>在代码中，异步流程相对来说更复杂一些，也更值得整理下。当然，程序猿可能更喜欢看代码：</p><blockquote><p>Talk is cheap. Show me the <a href="https://github.com/sunsly1991/code/tree/master/ly/asyncFlow" target="_blank" rel="noopener">code</a>.</p></blockquote><h2 id="一个具体问题"><a href="#一个具体问题" class="headerlink" title="一个具体问题"></a>一个具体问题</h2><p>通过一个具体问题，来逐步实现，并记录思路，题目来自<a href="https://mp.weixin.qq.com/s/HtYAaVuQPb-ivhMvVtnurA" target="_blank" rel="noopener">这里</a>:</p><p>获取并计算属于某个班级（假设 ID 为 75）的每个学生的平均分数。每个学生在一年内可以参加一门或多门课程。以下 API 可用于获取所需的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// GET LIST OF ALL THE STUDENTS</span><br><span class="line">GET /api/students</span><br><span class="line">Response:</span><br><span class="line">[&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;John&quot;,</span><br><span class="line">    &quot;classroomId&quot;: 75</span><br><span class="line">&#125;]</span><br><span class="line">// GET COURSES FOR GIVEN A STUDENT</span><br><span class="line">GET /api/courses?filter=studentId eq 1</span><br><span class="line">Response:</span><br><span class="line">[&#123;</span><br><span class="line">   &quot;id&quot;: &quot;history&quot;,</span><br><span class="line">   &quot;studentId&quot;: 1</span><br><span class="line">&#125;, &#123;</span><br><span class="line">   &quot;id&quot;: &quot;algebra&quot;,</span><br><span class="line">   &quot;studentId&quot;: 1</span><br><span class="line">&#125;,]</span><br><span class="line">// GET EVALUATION FOR EACH COURSE</span><br><span class="line">GET /api/evaluation/history?filter=studentId eq 1</span><br><span class="line">Response:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 200,</span><br><span class="line">    &quot;score&quot;: 50,</span><br><span class="line">    &quot;totalScore&quot;: 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个以班级 ID 作为参数的函数，你将使用这个函数计算该班级中每个学生的平均分数。这个函数的最终输出应该是带有平均分数的学生列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;John&quot;, &quot;average&quot;: 70.5 &#125;,</span><br><span class="line">  &#123; &quot;id&quot;: 3, &quot;name&quot;: &quot;Lois&quot;, &quot;average&quot;: 67 &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<a href="/2018/12/04/asyncFlow1-callback/">普通回调</a>、<a href="/2018/12/07/asyncFlow2-promise/">promises</a>、<a href="/2018/12/11/asyncFlow3-observable/">Observables</a>、<code>generator</code> 或 <a href="/2018/12/12/asyncFlow4-async-await/">async/await</a> 编写所需的函数。</p><h2 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h2><p><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a>用来生成随机数据，用于测试。</p><h3 id="1-模拟异步请求"><a href="#1-模拟异步请求" class="headerlink" title="1. 模拟异步请求"></a>1. 模拟异步请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">const</span> Random = Mock.Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayFn</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn()</span><br><span class="line">    &#125;, Random.natural(<span class="number">60</span>, <span class="number">100</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Mock-API"><a href="#2-Mock-API" class="headerlink" title="2. Mock API"></a>2. Mock API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStudents = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = Mock.mock(&#123;</span><br><span class="line">        <span class="string">'students|3-10'</span>: [&#123;</span><br><span class="line">            <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'@first'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    delayFn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(d.students)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getCourses = <span class="function"><span class="keyword">function</span> (<span class="params">studentId, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = Mock.mock(&#123;</span><br><span class="line">        <span class="string">'courses|3-5'</span>: [&#123;</span><br><span class="line">            studentId,</span><br><span class="line">            <span class="string">'id'</span>: <span class="string">'@word'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    delayFn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(d.courses)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getEvaluation = <span class="function"><span class="keyword">function</span> (<span class="params">studentId, courseId, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = Mock.mock(&#123;</span><br><span class="line">        evaluation: &#123;</span><br><span class="line">            studentId,</span><br><span class="line">            courseId,</span><br><span class="line">            <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'score'</span>: <span class="string">'@natural(0, 100)'</span>,</span><br><span class="line">            <span class="comment">// 'totalScore|1': [100, 150],</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    delayFn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(d.evaluation)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="各种异步流程实现"><a href="#各种异步流程实现" class="headerlink" title="各种异步流程实现"></a>各种异步流程实现</h2><h3 id="1-回调函数"><a href="#1-回调函数" class="headerlink" title="1. 回调函数"></a>1. <a href="/2018/12/04/asyncFlow1-callback/">回调函数</a></h3><h3 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. <a href="/2018/12/07/asyncFlow2-promise/">Promise</a></h3><h3 id="3-Observables"><a href="#3-Observables" class="headerlink" title="3. Observables"></a>3. <a href="/2018/12/11/asyncFlow3-observable/">Observables</a></h3><h3 id="4-async-await"><a href="#4-async-await" class="headerlink" title="4. async/await"></a>4. <a href="/2018/12/12/asyncFlow4-async-await/">async/await</a></h3>]]></content>
      
      
      <categories>
          
          <category> 异步流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> async </tag>
            
            <tag> 异步 </tag>
            
            <tag> callback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mvvm 概念理解、简单实现</title>
      <link href="/2018/11/29/mvvm/"/>
      <url>/2018/11/29/mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC-和-MVVM"><a href="#MVC-和-MVVM" class="headerlink" title="MVC 和 MVVM"></a><code>MVC</code> 和 <code>MVVM</code></h1><p>MVC是一种架构模式，相对来说最有名、应用最广。但是没有一个明确的定义，不同的框架的实现也稍有出入，但有一些共通地方。</p><p><a href="https://draveness.me/mvx" target="_blank" rel="noopener">扩展阅读1</a></p><p><a href="https://juejin.im/post/593021272f301e0058273468" target="_blank" rel="noopener">扩展阅读2</a></p><p>将整个应用分为Model（模型）、View（视图）、Controller（控制器）三部分，职责如下：</p><ul><li>视图：可视化的部分，模型数据的可视化</li><li>模型：数据部分，包含数据对象和基础的操作方法</li><li>控制器：作用在模型和视图上，处理具体的逻辑。控制模型数据的改变，并通知视图需要作出改变。使视图和模型分离。</li></ul><p><img src="https://raw.githubusercontent.com/Draveness/analyze/master/contents/architecture/images/mvx/Standard-MVC.jpg" alt="MVC"></p><ul><li>控制器是核心，负责对模型中的数据进行更新，通知视图需要更新</li><li>视图使用模型数据进行更新</li><li>模型很被动，负责安静的维护数据，提供一组接口来响应数据的请求和更新</li></ul><blockquote><p>只是一种组织的方式，目的是为了每层的职责明确，减少不同层次之间的耦合。并不一定得是这样才算是MVC模式</p></blockquote><p>一种更智能，当然约束也更大的方式，<code>MVVM</code>。把模型和视图进行了绑定，出现了VM，用VM的改变来驱动视图变化，同时也更新模型。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="MVVM"></p><ul><li>View和Model变得相对更独立，没有互相依赖</li><li>View只负责渲染页面，没有业务逻辑，称为“被动视图”</li><li>VM将Model的数据适配（绑定）到View，自动更新</li><li>VM和View实现双向绑定</li></ul><h1 id="VM做了很多事情，来实现一个吧"><a href="#VM做了很多事情，来实现一个吧" class="headerlink" title="VM做了很多事情，来实现一个吧"></a>VM做了很多事情，来实现一个吧</h1><p>实现如下<code>bindViewToData</code>方法，并一步一步优化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">'app'</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            My name is &#123;&#123; firstName + ' ' + lastName &#125;&#125;, I am &#123;&#123;age&#125;&#125; years old.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; friends &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> appData = &#123;</span></span><br><span class="line"><span class="javascript">        firstName: <span class="string">'Lucy'</span>,</span></span><br><span class="line"><span class="javascript">        lastName: <span class="string">'Green'</span>,</span></span><br><span class="line"><span class="undefined">        age: 13,</span></span><br><span class="line"><span class="javascript">        friends: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    bindViewToData(<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>), appData)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// div 里面的 p 元素的内容为</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// My name is Lucy Green, I am 13 years old.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        appData.firstName = <span class="string">'Jerry'</span></span></span><br><span class="line"><span class="undefined">        appData.age = 16</span></span><br><span class="line"><span class="undefined">    &#125;, 3000)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// div 里面的 p 元素的内容自动变为</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// My name is Jerry Green, I am 16 years old.</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板解析、渲染"><a href="#模板解析、渲染" class="headerlink" title="模板解析、渲染"></a>模板解析、渲染</h2><p>用数据渲染指定节点</p><h3 id="1-遍历找出需要渲染的节点"><a href="#1-遍历找出需要渲染的节点" class="headerlink" title="1. 遍历找出需要渲染的节点"></a>1. 遍历找出需要渲染的节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度遍历所有DOM节点，并对每个节点执行回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOMComb</span> (<span class="params">oParent, oCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oParent.hasChildNodes()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> oNode = oParent.firstChild; oNode; oNode = oNode.nextSibling) &#123;</span><br><span class="line">            DOMComb(oNode, oCallback)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oCallback.call(oParent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bindViewToData = <span class="function">(<span class="params">el, data</span>) =&gt;</span> &#123;</span><br><span class="line">    DOMComb(el, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// nodeType === 3 为Text Node</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="keyword">this</span>.nodeType === <span class="number">3</span> &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.nodeValue &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.nodeValue.match(<span class="regexp">/\&#123;\&#123;.*\&#125;\&#125;/</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// TODO 用数据渲染节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展阅读：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noopener">DOM Node</a></li></ul><p>遍历出来的节点，需要解析其中的特殊格式，并用数据替换。</p><h3 id="2-节点中的文本替换为数据"><a href="#2-节点中的文本替换为数据" class="headerlink" title="2. 节点中的文本替换为数据"></a>2. 节点中的文本替换为数据</h3><p>问题变为：将字符串变成可执行的js代码，eval 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">new Function</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span> (<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="comment">// DOM Node</span></span><br><span class="line">    <span class="keyword">this</span>.Node = node</span><br><span class="line">    <span class="comment">// 原始模板</span></span><br><span class="line">    <span class="keyword">this</span>.nodeTmpl = node.nodeValue</span><br><span class="line">&#125;</span><br><span class="line">Node.prototype = &#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Node.nodeValue = <span class="keyword">this</span>.nodeTmpl.replace(<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, (match, p1, offset, string) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.execute(p1)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span> (<span class="params">exp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(</span><br><span class="line">            ...Object.keys(<span class="keyword">this</span>.data),</span><br><span class="line">            <span class="string">`return <span class="subst">$&#123;exp&#125;</span>`</span></span><br><span class="line">        )(...Object.values(<span class="keyword">this</span>.data))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展阅读：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">new Function</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">String.prototype.replace()</a></li></ul><p>补齐上文<code>bindViewToData</code>的TODO部分<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const bindViewToData = (el, data) =&gt; &#123;</span><br><span class="line">    DOMComb(el, function () &#123;</span><br><span class="line">        // nodeType <span class="comment">=== 3 为Text Node</span></span><br><span class="line">        if (</span><br><span class="line">            this.nodeType <span class="comment">=== 3 &amp;&amp;</span></span><br><span class="line">            this.nodeValue &amp;&amp;</span><br><span class="line">            this.nodeValue.match(/\&#123;\&#123;.*\&#125;\&#125;/)</span><br><span class="line">        ) &#123;</span><br><span class="line"><span class="addition">+            const node = new Node(this, data)</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+            node.render()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初步实现用<code>data</code>渲染<code>el</code>内特殊格式文本的功能。</p><h2 id="模型和视图绑定"><a href="#模型和视图绑定" class="headerlink" title="模型和视图绑定"></a>模型和视图绑定</h2><p>在数据有变化时，重新渲染视图</p><h3 id="1-简单粗暴的全量重新渲染"><a href="#1-简单粗暴的全量重新渲染" class="headerlink" title="1. 简单粗暴的全量重新渲染"></a>1. 简单粗暴的全量重新渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 收集依赖，并在有需要的时候通知更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一个订阅者Node的数组</span></span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.subs.includes(node)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subs.push(node)</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">            node.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Node添加update方法</span><br><span class="line">Node.prototype = &#123;</span><br><span class="line">    render: ...</span><br><span class="line">    execute: ...</span><br><span class="line"><span class="addition">+    update: function () &#123;</span></span><br><span class="line"><span class="addition">+        this.render()</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 在第一次渲染时，建立节点对数据的依赖关系</span><br><span class="line">const bindViewToData = (el, data) =&gt; &#123;</span><br><span class="line"><span class="addition">+    const dep = new Dep()</span></span><br><span class="line"></span><br><span class="line">    DOMComb(el, function () &#123;</span><br><span class="line">        // nodeType <span class="comment">=== 3 为Text Node</span></span><br><span class="line">        if (</span><br><span class="line">            this.nodeType <span class="comment">=== 3 &amp;&amp;</span></span><br><span class="line">            this.nodeValue &amp;&amp;</span><br><span class="line">            this.nodeValue.match(/\&#123;\&#123;.*\&#125;\&#125;/)</span><br><span class="line">        ) &#123;</span><br><span class="line">            const node = new Node(this, data)</span><br><span class="line"></span><br><span class="line">            node.render()</span><br><span class="line"><span class="addition">+            dep.addSub(node)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在数据更新时，根据依赖关系触发视图更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val = null, dep</span>) </span>&#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">_val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (val === _val) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            val = _val</span><br><span class="line">            dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 添加数据绑定逻辑</span><br><span class="line">const bindViewToData = (el, data) =&gt; &#123;</span><br><span class="line">    const dep = new Dep()</span><br><span class="line"></span><br><span class="line">    DOMComb(el, function () &#123;</span><br><span class="line">        // nodeType <span class="comment">=== 3 为Text Node</span></span><br><span class="line">        if (</span><br><span class="line">            this.nodeType <span class="comment">=== 3 &amp;&amp;</span></span><br><span class="line">            this.nodeValue &amp;&amp;</span><br><span class="line">            this.nodeValue.match(/\&#123;\&#123;.*\&#125;\&#125;/)</span><br><span class="line">        ) &#123;</span><br><span class="line">            const node = new Node(this, data)</span><br><span class="line"></span><br><span class="line">            node.render()</span><br><span class="line">            dep.addSub(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+    for (let prop in data) &#123;</span></span><br><span class="line"><span class="addition">+        defineReactive(data, prop, data[prop], dep)</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了数据更新后，自动通知视图重新渲染。但效率很低，全量更新。</p><h3 id="2-按需重新渲染"><a href="#2-按需重新渲染" class="headerlink" title="2. 按需重新渲染"></a>2. 按需重新渲染</h3><p>当数据有更新时，只重新渲染使用了该数据的节点。</p><p>需要更详细的数据绑定：当渲染某个节点时，获取的数据即可绑定到该节点，在数据更新时，只单独更新绑定的节点即可。</p><p>需要作出如下修改:</p><ol><li>将前文数据绑定到所有节点，改为每个数据绑定使用该数据的节点（相关修改：Dep.target，Dep.depend(), Node.bind(), defineReactive()里属性的getter）</li><li>在数据有更新时，仅重新渲染使用该数据的节点（相关修改：defineReactive()里属性的setter）</li></ol><p>修改后的代码如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// Node 相关</span><br><span class="line"></span><br><span class="line">/* Node dom节点的包装，可以直接触发用数据重新渲染该节点 */</span><br><span class="line">function Node (node, data) &#123;</span><br><span class="line">    this.data = data</span><br><span class="line">    // DOM Node</span><br><span class="line">    this.Node = node</span><br><span class="line">    // 原始模板</span><br><span class="line">    this.nodeTmpl = node.nodeValue</span><br><span class="line"><span class="addition">+    // 依赖的数据</span></span><br><span class="line"><span class="addition">+    this.deps = []</span></span><br><span class="line">&#125;</span><br><span class="line">Node.prototype = &#123;</span><br><span class="line"><span class="addition">+    // 绑定数据，并使用数据渲染页面</span></span><br><span class="line"><span class="addition">+    bind: function () &#123;</span></span><br><span class="line"><span class="addition">+        // 设置target为当前节点</span></span><br><span class="line"><span class="addition">+        pushTarget(this)</span></span><br><span class="line"><span class="addition">+        this.render()</span></span><br><span class="line"><span class="addition">+        // 取消设置当前节点为target</span></span><br><span class="line"><span class="addition">+        popTarget()</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    // 数据更新时，回调的方法</span><br><span class="line">    update: function () &#123;</span><br><span class="line">        this.render()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 使用数据渲染节点</span><br><span class="line">    render: function () &#123;</span><br><span class="line">        this.Node.nodeValue = this.nodeTmpl.replace(</span><br><span class="line">            /\&#123;\&#123;(.*?)\&#125;\&#125;/g,</span><br><span class="line">            (match, p1, offset, string) =&gt; &#123;</span><br><span class="line">            return this.execute(p1)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // with数据，执行表达式</span><br><span class="line">    execute: function (exp) &#123;</span><br><span class="line">        return new Function(</span><br><span class="line"><span class="deletion">-            ...Object.keys(this.data),</span></span><br><span class="line"><span class="deletion">-                `return $&#123;exp&#125;`</span></span><br><span class="line"><span class="deletion">-        )(...Object.values(this.data))</span></span><br><span class="line"><span class="addition">+            'data',</span></span><br><span class="line"><span class="addition">+            `with(data) &#123;</span></span><br><span class="line"><span class="addition">+                return $&#123;exp&#125;</span></span><br><span class="line"><span class="addition">+            &#125;`</span></span><br><span class="line"><span class="addition">+        )(this.data)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    // 添加依赖的数据</span></span><br><span class="line"><span class="addition">+    addDep: function (dep) &#123;</span></span><br><span class="line"><span class="addition">+        if (this.deps.includes(dep)) return false</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        return this.deps.push(dep)</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展阅读：<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with" target="_blank" rel="noopener">with MDN</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// 数据绑定，Dep</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * observer 观察者</span><br><span class="line"> * - 数据获取时，绑定对应关系</span><br><span class="line"> * - 数据有变化，通知改变</span><br><span class="line"> */</span><br><span class="line">function defineReactive (obj, key, val = null) &#123;</span><br><span class="line">    // 数据每个值，对应一个dep实例，用于记录依赖，通知更新</span><br><span class="line"><span class="addition">+    const dep = new Dep(key)</span></span><br><span class="line">    val = obj[key]</span><br><span class="line"></span><br><span class="line">    Object.defineProperty(obj, key, &#123;</span><br><span class="line">        get: function () &#123;</span><br><span class="line"><span class="addition">+            if (Dep.target) &#123;</span></span><br><span class="line"><span class="addition">+                // 建立数据和Node的依赖关系</span></span><br><span class="line"><span class="addition">+                dep.depend()</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line">            return val</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function (_val) &#123;</span><br><span class="line">            if (val <span class="comment">=== _val) return false</span></span><br><span class="line"></span><br><span class="line">            val = _val</span><br><span class="line">            dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function Dep (name) &#123;</span><br><span class="line">    // 记录下数据名字 - key</span><br><span class="line">    this.name = name</span><br><span class="line">    // 一个Node的数组</span><br><span class="line">    this.subs = []</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line"><span class="addition">+    // 将会指向一个Node</span></span><br><span class="line"><span class="addition">+    // 同一时间只会有一个Node被用来处理依赖关系</span></span><br><span class="line"><span class="addition">+    // 将会用在获取数据和Node的对应关系</span></span><br><span class="line"><span class="addition">+    target: null,</span></span><br><span class="line"><span class="addition">+    // 让当前指向的那个Node，依赖Dep关联的数据</span></span><br><span class="line"><span class="addition">+    depend: function () &#123;</span></span><br><span class="line"><span class="addition">+        if (Dep.target &amp;&amp; Dep.target.addDep(this)) &#123;</span></span><br><span class="line"><span class="addition">+            this.addSub(Dep.target)</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    addSub: function (node) &#123;</span><br><span class="line">        if (this.subs.includes(node)) return false</span><br><span class="line">        return this.subs.push(node)</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: function () &#123;</span><br><span class="line">        this.subs.forEach(function (node) &#123;</span><br><span class="line">            node.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+Dep.target = null</span></span><br><span class="line"><span class="addition">+const targetStack = []</span></span><br><span class="line"><span class="addition">+function pushTarget (_target) &#123;</span></span><br><span class="line"><span class="addition">+    if (Dep.target) targetStack.push(Dep.target)</span></span><br><span class="line"><span class="addition">+    Dep.target = _target</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+function popTarget () &#123;</span></span><br><span class="line"><span class="addition">+    Dep.target = targetStack.pop()</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const bindViewToData = (el, data) =&gt; &#123;</span><br><span class="line"><span class="deletion">-    const dep = new Dep()</span></span><br><span class="line"></span><br><span class="line">    for (let prop in data) &#123;</span><br><span class="line"><span class="deletion">-        defineReactive(data, prop, data[prop], dep)</span></span><br><span class="line"><span class="addition">+        defineReactive(data, prop)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DOMComb(el, function () &#123;</span><br><span class="line">        // nodeType <span class="comment">=== 3 为Text Node</span></span><br><span class="line">        if (</span><br><span class="line">            this.nodeType <span class="comment">=== 3 &amp;&amp;</span></span><br><span class="line">            this.nodeValue &amp;&amp;</span><br><span class="line">            this.nodeValue.match(/\&#123;\&#123;.*\&#125;\&#125;/)</span><br><span class="line">        ) &#123;</span><br><span class="line">            const node = new Node(this, data)</span><br><span class="line"></span><br><span class="line"><span class="deletion">-            node.render()</span></span><br><span class="line"><span class="deletion">-            dep.addSub(node)</span></span><br><span class="line"><span class="addition">+            node.bind()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>致此，基本实现数据绑定节点，并用数据更新驱动页面节点重新渲染。</p><h2 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h2><h3 id="1-短时间多次重复渲染同一节点"><a href="#1-短时间多次重复渲染同一节点" class="headerlink" title="1. 短时间多次重复渲染同一节点"></a>1. 短时间多次重复渲染同一节点</h3><p>发现问题：</p><ul><li>一个节点里包含多个数据字段，短时间多次更改字段数据，会频繁重新渲染节点</li><li>多次修改同一数据字段值，会频繁重新渲染节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工具方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖，合并多次操作，最终一次执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, ms</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="keyword">this</span>, ...arguments)</span><br><span class="line">        &#125;, ms)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Node update方法debounce处理</span><br><span class="line">Node.prototype = &#123;</span><br><span class="line"><span class="deletion">-    update: function () &#123;</span></span><br><span class="line"><span class="deletion">-        this.render()</span></span><br><span class="line"><span class="deletion">-    &#125;,</span></span><br><span class="line"><span class="addition">+    update: debounce(function () &#123;</span></span><br><span class="line"><span class="addition">+        this.render()</span></span><br><span class="line"><span class="addition">+    &#125;, 400),</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mvvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvvm </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
